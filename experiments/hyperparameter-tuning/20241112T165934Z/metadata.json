{
    "experiment_name": "hyperparameter_tuning_point_estimation_20241112T165934Z",
    "float_columns": [
        "Longitude",
        "Latitude",
        "Speed",
        "SNR",
        "Level",
        "Qual"
    ],
    "categorical_columns": [
        "CellID",
        "Node",
        "NetworkMode",
        "BAND",
        "BANDWIDTH",
        "LAC",
        "PSC"
    ],
    "models": {
        "RF": {
            "name": "RF",
            "type": "<class 'sklearn.ensemble._forest.RandomForestRegressor'>",
            "parameter_grid": {
                "n_estimators": [
                    50,
                    100,
                    200
                ],
                "max_depth": [
                    null,
                    10,
                    20
                ],
                "min_samples_split": [
                    2,
                    5,
                    10
                ],
                "min_samples_leaf": [
                    1,
                    2,
                    4
                ],
                "max_features": [
                    0.3,
                    "sqrt",
                    "log2"
                ]
            },
            "parameters": "{'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 0.3, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 200, 'n_jobs': None, 'oob_score': False, 'random_state': 42, 'verbose': 0, 'warm_start': False}"
        },
        "XGB": {
            "name": "XGB",
            "type": "<class 'xgboost.sklearn.XGBRegressor'>",
            "parameter_grid": {
                "n_estimators": [
                    100,
                    200,
                    500
                ],
                "learning_rate": [
                    0.01,
                    0.05,
                    0.1
                ],
                "max_depth": [
                    null,
                    10,
                    20
                ],
                "subsample": [
                    0.6,
                    0.8,
                    1.0
                ],
                "colsample_bytree": [
                    0.6,
                    0.8,
                    1.0
                ],
                "gamma": [
                    0,
                    0.3
                ],
                "reg_alpha": [
                    0.1
                ],
                "reg_lambda": [
                    0.1
                ]
            },
            "parameters": "{'objective': 'reg:squarederror', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': 0.6, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': 0, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.01, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 20, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 500, 'n_jobs': None, 'num_parallel_tree': None, 'random_state': 42, 'reg_alpha': 0.1, 'reg_lambda': 0.1, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': 0.6, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}"
        },
        "NN": {
            "name": "NN",
            "type": "<class 'skorch.regressor.NeuralNetRegressor'>",
            "parameter_grid": {
                "module__dropout_rate": [
                    0.2,
                    0.3
                ],
                "lr": [
                    0.005,
                    0.01,
                    0.02
                ],
                "optimizer__weight_decay": [
                    0,
                    0.001
                ],
                "optimizer__betas": [
                    [
                        0.9,
                        0.999
                    ],
                    [
                        0.95,
                        0.999
                    ]
                ],
                "max_epochs": [
                    100,
                    200,
                    300
                ],
                "batch_size": [
                    64,
                    128
                ]
            },
            "parameters": "{'module': <class 'models.neuralnetwork.architecture.ThroughputPredictor'>, 'criterion': <class 'torch.nn.modules.loss.MSELoss'>, 'optimizer': <class 'torch.optim.adam.Adam'>, 'lr': 0.005, 'max_epochs': 300, 'batch_size': 64, 'iterator_train': <class 'torch.utils.data.dataloader.DataLoader'>, 'iterator_valid': <class 'torch.utils.data.dataloader.DataLoader'>, 'dataset': <class 'skorch.dataset.Dataset'>, 'train_split': None, 'callbacks': None, 'predict_nonlinearity': 'auto', 'warm_start': False, 'verbose': 0, 'device': 'cpu', 'compile': False, 'use_caching': 'auto', '_params_to_validate': {'module__input_size', 'optimizer__weight_decay', 'optimizer__betas', 'module__dropout_rate'}, 'module__input_size': 40, 'module__dropout_rate': 0.2, 'optimizer__betas': (0.9, 0.999), 'optimizer__weight_decay': 0.001, 'callbacks__epoch_timer': <skorch.callbacks.logging.EpochTimer object at 0x164844b20>, 'callbacks__train_loss': <skorch.callbacks.scoring.PassthroughScoring object at 0x164844d60>, 'callbacks__train_loss__name': 'train_loss', 'callbacks__train_loss__lower_is_better': True, 'callbacks__train_loss__on_train': True, 'callbacks__valid_loss': <skorch.callbacks.scoring.PassthroughScoring object at 0x164844460>, 'callbacks__valid_loss__name': 'valid_loss', 'callbacks__valid_loss__lower_is_better': True, 'callbacks__valid_loss__on_train': False, 'callbacks__print_log': <skorch.callbacks.logging.PrintLog object at 0x164841340>, 'callbacks__print_log__keys_ignored': None, 'callbacks__print_log__sink': <built-in function print>, 'callbacks__print_log__tablefmt': 'simple', 'callbacks__print_log__floatfmt': '.4f', 'callbacks__print_log__stralign': 'right'}"
        }
    },
    "notes": ""
}